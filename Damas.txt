package com.mycompany.jogodamas;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class JogoDamas extends JFrame {
    private JButton[][] bt = new JButton[8][8];
    private char[][] board = new char[8][8];
    private boolean selected = false;
    private int selectedRow, selectedCol;
    private boolean whiteTurn = true;

    public JogoDamas() {
        setTitle("Damas");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(8, 8));
        setSize(800, 700);
        setLocationRelativeTo(null);
        initializeBoard();
        initializeButtons();
        setVisible(true);
    }

    private void initializeBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 != 0) {
                    if (i < 3) {
                        board[i][j] = 'B';
                    } else if (i > 4) {
                        board[i][j] = 'W';
                    } else {
                        board[i][j] = ' ';
                    }
                } else {
                    board[i][j] = ' ';
                }
            }
        }
    }

    private void initializeButtons() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                bt[i][j] = new JButton();
                add(bt[i][j]);

                if ((i + j) % 2 == 0) {
                    bt[i][j].setBackground(Color.WHITE);
                } else {
                    bt[i][j].setBackground(Color.DARK_GRAY);
                    bt[i][j].setForeground(Color.BLACK);
                    bt[i][j].addActionListener(new ButtonClickListener(i, j));
                    updateButton(i, j);
                }
            }
        }
    }

    private void updateButton(int i, int j) {
        if (board[i][j] == 'B') {
            bt[i][j].setText("B");
            bt[i][j].setForeground(Color.BLACK);
        } else if (board[i][j] == 'W') {
            bt[i][j].setText("W");
            bt[i][j].setForeground(Color.WHITE);
        } else if (board[i][j] == 'b' || board[i][j] == 'w') {
            bt[i][j].setText("K");
            bt[i][j].setForeground(board[i][j] == 'b' ? Color.BLACK : Color.WHITE);
        } else {
            bt[i][j].setText("");
        }
    }

    private class ButtonClickListener implements ActionListener {
        private int row, col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!selected) {
                if (board[row][col] != ' ' && isCurrentPlayerPiece(row, col)) {
                    selected = true;
                    selectedRow = row;
                    selectedCol = col;
                    bt[row][col].setBackground(Color.LIGHT_GRAY);
                }
            } else {
                if (movePiece(row, col)) {
                    selected = false;
                    updateBoard();
                    whiteTurn = !whiteTurn;
                }
            }
        }
    }

    private boolean isCurrentPlayerPiece(int row, int col) {
        if (whiteTurn) {
            return board[row][col] == 'W' || board[row][col] == 'w';
        } else {
            return board[row][col] == 'B' || board[row][col] == 'b';
        }
    }

    private boolean movePiece(int row, int col) {
        if (board[row][col] == ' ' && isValidMove(row, col)) {
            if ((board[selectedRow][selectedCol] == 'W' && row < selectedRow) ||
                    (board[selectedRow][selectedCol] == 'B' && row > selectedRow) ||
                    Character.toUpperCase(board[selectedRow][selectedCol]) == 'K') {

                board[row][col] = board[selectedRow][selectedCol];
                board[selectedRow][selectedCol] = ' ';
                // Check for capture
                if (Math.abs(row - selectedRow) == 2 && Math.abs(col - selectedCol) == 2) {
                    int captureRow = (row + selectedRow) / 2;
                    int captureCol = (col + selectedCol) / 2;
                    board[captureRow][captureCol] = ' ';
                }
                // Promote piece to king if it reaches the opposite end of the board
                if ((row == 0 && board[row][col] == 'W') || (row == 7 && board[row][col] == 'B')) {
                    board[row][col] = Character.toLowerCase(board[row][col]); // Promote to king
                }
                updateButton(row, col); // Update button representation after moving the piece
                return true;
            }
        }
        return false;
    }

    private boolean isValidMove(int row, int col) {
        if (Math.abs(row - selectedRow) == 1 && Math.abs(col - selectedCol) == 1) {
            return true;
        } else if (Math.abs(row - selectedRow) == 2 && Math.abs(col - selectedCol) == 2) {
            int midRow = (row + selectedRow) / 2;
            int midCol = (col + selectedCol) / 2;
            return board[midRow][midCol] != ' ' && board[midRow][midCol] != board[selectedRow][selectedCol];
        }
        // Check for movement for a king piece
        else if (Character.toUpperCase(board[selectedRow][selectedCol]) == 'K' &&
                Math.abs(row - selectedRow) == 1 && Math.abs(col - selectedCol) == 1) {
            return true;
        }
        return false;
    }

    private void updateBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 == 0) {
                    bt[i][j].setBackground(Color.WHITE);
                } else {
                    bt[i][j].setBackground(Color.DARK_GRAY);
                }
                updateButton(i, j);
            }
        }
        checkWinCondition();
    }

    private void checkWinCondition() {
        boolean whiteExists = false;
        boolean blackExists = false;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++)
{
                if (board[i][j] == 'W' || board[i][j] == 'K') {
                    whiteExists = true;
                } else if (board[i][j] == 'B' || board[i][j] == 'k') {
                    blackExists = true;
                }
            }
        }
        if (!whiteExists) {
            JOptionPane.showMessageDialog(this, "Black wins!");
            System.exit(0);
        } else if (!blackExists) {
            JOptionPane.showMessageDialog(this, "White wins!");
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        new JogoDamas();
    }
}
