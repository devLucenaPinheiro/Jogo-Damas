package com.mycompany.jogodamas;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class JogoDamas extends JFrame {
    private JButton[][] bt = new JButton[8][8];
    private char[][] board = new char[8][8];
    private boolean selected = false;
    private int selectedRow, selectedCol;
    private boolean whiteTurn = true;

    public JogoDamas() {
        setTitle("Damas");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(8, 8));
        setSize(800, 700);
        setLocationRelativeTo(null);
        initializeBoard();
        initializeButtons();
        setVisible(true);
    }

    private void initializeBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 != 0) {
                    if (i < 3) {
                        board[i][j] = 'B';
                    } else if (i > 4) {
                        board[i][j] = 'W';
                    } else {
                        board[i][j] = ' ';
                    }
                } else {
                    board[i][j] = ' ';
                }
            }
        }
    }

    private void initializeButtons() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                bt[i][j] = new JButton();
                add(bt[i][j]);

                if ((i + j) % 2 == 0) {
                    bt[i][j].setBackground(Color.WHITE);
                } else {
                    bt[i][j].setBackground(Color.DARK_GRAY);
                    bt[i][j].setForeground(Color.BLACK);
                    bt[i][j].addActionListener(new ButtonClickListener(i, j));
                    updateButton(i, j);
                }
            }
        }
    }

    private void updateButton(int i, int j) {
        if (board[i][j] == 'B') {
            bt[i][j].setText("B");
            bt[i][j].setForeground(Color.BLACK);
        } else if (board[i][j] == 'W') {
            bt[i][j].setText("W");
            bt[i][j].setForeground(Color.WHITE);
        } else if (board[i][j] == 'b' || board[i][j] == 'w') {
            bt[i][j].setText("K");
            bt[i][j].setForeground(board[i][j] == 'b' ? Color.BLACK : Color.WHITE);
        } else {
            bt[i][j].setText("");
        }
    }

    private class ButtonClickListener implements ActionListener {
    private int row, col;

    public ButtonClickListener(int row, int col) {
        this.row = row;
        this.col = col;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!selected) {
            if (board[row][col] != ' ' && isCurrentPlayerPiece(row, col)) {
                selected = true;
                selectedRow = row;
                selectedCol = col;
                bt[row][col].setBackground(Color.LIGHT_GRAY);
                highlightPossibleMoves(row, col);
            }
        } else {
            if (selectedRow == row && selectedCol == col) {
                clearHighlights();
                selected = false;
            } else {
                boolean wasCapture = movePiece(row, col);
                if (wasCapture && canCaptureAgain(row, col)) {
                    selected = true;
                    selectedRow = row;
                    selectedCol = col;
                    bt[row][col].setBackground(Color.LIGHT_GRAY);
                    highlightPossibleMoves(row, col);
                    return;
                } else if (wasCapture || isValidMove(row, col)) {
                    selected = false;
                    updateBoard();
                    whiteTurn = !whiteTurn;
                }
            }
        }
    }
}


    private boolean isCurrentPlayerPiece(int row, int col) {
        if (whiteTurn) {
            return board[row][col] == 'W' || board[row][col] == 'w';
        } else {
            return board[row][col] == 'B' || board[row][col] == 'b';
        }
    }

    private boolean movePiece(int row, int col) {
        if (board[row][col] == ' ' && isValidMove(row, col)) {
            char piece = board[selectedRow][selectedCol];
            board[row][col] = piece;
            board[selectedRow][selectedCol] = ' ';
            boolean wasCapture = false;

            if (Math.abs(row - selectedRow) == 2 && Math.abs(col - selectedCol) == 2) {
                int captureRow = (row + selectedRow) / 2;
                int captureCol = (col + selectedCol) / 2;
                board[captureRow][captureCol] = ' ';
                wasCapture = true;
            }

            if ((row == 0 && piece == 'W') || (row == 7 && piece == 'B')) {
                board[row][col] = Character.toLowerCase(piece);
            }
            clearHighlights();
            updateButton(row, col);
            return wasCapture;
        }
        return false;
    }

    private boolean canCaptureAgain(int row, int col) {
        char piece = board[row][col];
        char opponent = whiteTurn ? 'B' : 'W';
        char opponentKing = Character.toLowerCase(opponent);

        int[] dx = {-2, -2, 2, 2};
        int[] dy = {-2, 2, -2, 2};

        for (int i = 0; i < 4; i++) {
            int newRow = row + dx[i];
            int newCol = col + dy[i];
            if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8 && board[newRow][newCol] == ' ') {
                int midRow = (row + newRow) / 2;
                int midCol = (col + newCol) / 2;
                if ((board[midRow][midCol] == opponent || board[midRow][midCol] == opponentKing) && board[newRow][newCol] == ' ') {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean isValidMove(int row, int col) {
        if (row < 0 || row >= 8 || col < 0 || col >= 8) return false;

        char piece = board[selectedRow][selectedCol];
        char opponent = whiteTurn ? 'B' : 'W';
        char opponentKing = Character.toLowerCase(opponent);

        if (piece == 'w' || piece == 'b') {
            if (Math.abs(row - selectedRow) == 1 && Math.abs(col - selectedCol) == 1) {
                return true;
            } else if (Math.abs(row - selectedRow) == 2 && Math.abs(col - selectedCol) == 2) {
                int midRow = (row + selectedRow) / 2;
                int midCol = (col + selectedCol) / 2;
                return (board[midRow][midCol] == opponent || board[midRow][midCol] == opponentKing) && board[row][col] == ' ';
            }
        } else {
            int dir = whiteTurn ? -1 : 1;
            if (row - selectedRow == dir && Math.abs(col - selectedCol) == 1) {
                return true;
            } else if (Math.abs(row - selectedRow) == 2 && Math.abs(col - selectedCol) == 2) {
                int midRow = (row + selectedRow) / 2;
                int midCol = (col + selectedCol) / 2;
                return (piece == 'W' && row - selectedRow == -2 && (board[midRow][midCol] == 'B' || board[midRow][midCol] == 'b') && board[row][col] == ' ') ||
                       (piece == 'B' && row - selectedRow == 2 && (board[midRow][midCol] == 'W' || board[midRow][midCol] == 'w') && board[row][col] == ' ');
            }
        }
        return false;
    }

    private void highlightPossibleMoves(int row, int col) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (isValidMove(i, j)) {
                    bt[i][j].setBackground(Color.GREEN);
                }
            }
        }
    }

    private void clearHighlights() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 == 0) {
                    bt[i][j].setBackground(Color.WHITE);
                } else {
                    bt [i][j].setBackground(Color.DARK_GRAY);
                }
            }
        }
    }

    private void updateBoard() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if ((i + j) % 2 == 0) {
                    bt[i][j].setBackground(Color.WHITE);
                } else {
                    bt[i][j].setBackground(Color.DARK_GRAY);
                }
                updateButton(i, j);
            }
        }
        checkWinCondition();
    }

    private void checkWinCondition() {
        boolean whiteExists = false;
        boolean blackExists = false;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'W' || board[i][j] == 'w') {
                    whiteExists = true;
                } else if (board[i][j] == 'B' || board[i][j] == 'b') {
                    blackExists = true;
                }
            }
        }
        if (!whiteExists) {
            JOptionPane.showMessageDialog(this, "Black wins!");
            System.exit(0);
        } else if (!blackExists) {
            JOptionPane.showMessageDialog(this, "White wins!");
            System.exit(0);
        }
    }

    public static void main(String[] args) {
        new JogoDamas();
    }
}